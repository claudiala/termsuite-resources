apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven-publish'

group = 'fr.univ-nantes.termsuite'
archivesBaseName = 'termsuite-resources'
version = '2.1.1'

project.ext.description = 'Linguistic resources for TermSuite'
project.ext.organization = 'LINA CNRS UMR 6241 - UniversitÃ© de Nantes'
project.ext.name = 'TermSuite'
project.ext.url = 'https://github.com/termsuite/termsuite-core'
project.ext.license = 'Apache 2'
project.ext.licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
project.ext.jcasFile = 'src/main/resources/TermSuite_TS.xml'


if(hasProperty("signing.keyId")) {
	// activate signing of artifacts, only if signing is configured properly
	signing {
		sign configurations.archives
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId group
			artifactId archivesBaseName
			version version

			from components.java
		}
	}
}

if(hasProperty("ossrhUsername")) {
  uploadArchives {
  	repositories {
  	  mavenDeployer {
    		beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      		repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
      		  authentication(userName: ossrhUsername, password: ossrhPassword)
      		}
      		snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
      		  authentication(userName: ossrhUsername, password: ossrhPassword)
      		}

      		pom.project {
      		  name project.ext.name
      		  packaging 'jar'
      		  // optionally artifactId can be defined here
      		  description project.ext.description
      		  url project.ext.url

      		  scm {
      			  connection 'scm:git:git@github.com:termsuite/termsuite-core.git'
      			  developerConnection 'scm:git:git@github.com:termsuite/termsuite-core.git'
      			  url 'git@github.com:termsuite/termsuite-core.git'
      		  }

      		  licenses {
      			  license {
      				  name 'The Apache License, Version 2.0'
      				  url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
      			  }
      		  }

      		  developers {
      			  developer {
      				  id developerId
      				  name developerName
      				  email developerEmail
      			  }
      		  }
      		}
	     }
  	}
  }
} else {
  def msg = "Publishing to maven central (task uploadArchives) is not possible since no gradle property file is found (use \"\$ cp gradle.properties.sample gradle.properties\" and edit gradle.properties)"
  logger.warn(msg)
}

jar {

	from("./") {
	    include "fr/*"
	    include "en/*"
	    include "de/*"
	    include "es/*"
	    include "ru/*"
	    include "zh/*"
	    include "lv/*"
	    include "da/*"
	}	

	// make it fat
    dependsOn configurations.runtime
	from( configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } ) {
		 exclude "META-INF/*"
    }

    // cannot exclude META-INF for groovy to run
	from( configurations.runtime.findAll{it.getAbsolutePath().contains("org.codehaus.groovy")}.collect { it.isDirectory() ? it : zipTree(it) } ) {
		include "META-INF/*"
	}

	// tune manifest
    manifest {
        attributes(
			"Implementation-Title": project.ext.name,
			"Implementation-Version": version,
            "Built-By": System.getProperty('user.name'),
            "Built-Date": new Date(),
            "Built-JDK": System.getProperty('java.version'),
			"Main-Class": "eu.project.ttc.tools.TermSuite")
    }
}


